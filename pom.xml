<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>de.rub.nds</groupId>
        <artifactId>protocol-toolkit-bom</artifactId>
        <version>6.0.0</version>
    </parent>

    <groupId>de.rub.nds.tls</groupId>
    <artifactId>coffee4j-anvil-aggregate</artifactId>
    <version>2.0.1-SNAPSHOT</version>
    <packaging>pom</packaging>

    <name>${project.groupId}:${project.artifactId}</name>
    <description>coffee4j is a framework that integrates combinatorial test generation and automated test execution via JUnit5</description>
    <url>https://coffee4j.github.io</url>

    <licenses>
        <license>
            <name>Eclipse Public License, Version 2.0</name>
            <url>http://www.eclipse.org/legal/epl-v20.html</url>
            <distribution>repo</distribution>
        </license>
    </licenses>

    <developers>
        <developer>
            <name>Konrad Foegen</name>
            <email>foegen@swc.rwth-aachen.de</email>
            <organization>SWC, RWTH Aachen University</organization>
            <organizationUrl>https://swc.rwth-aachen.de</organizationUrl>
        </developer>
    </developers>

    <modules>
        <module>coffee4j-engine</module>
        <module>coffee4j-junit-jupiter</module>
        <module>coffee4j-model</module>
    </modules>

    <scm>
        <connection>scm:git:https://github.com/tls-attacker/coffee4j.git</connection>
        <developerConnection>scm:git:ssh://git@github.com/tls-attacker/coffee4j.git</developerConnection>
        <tag>HEAD</tag>
        <url>https://github.com/tls-attacker/coffee4j</url>
    </scm>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <maven.compiler.source>21</maven.compiler.source>
        <maven.compiler.target>21</maven.compiler.target>
        <main.basedir>${project.basedir}</main.basedir>
        <!-- The following variables are required for Jenkins CI -->
        <skipTests>false</skipTests>
        <skip.surefire.tests>${skipTests}</skip.surefire.tests>
        <skip.failsafe.tests>${skipTests}</skip.failsafe.tests>
        <!-- Variables from upstream -->
        <slf4j.version>2.0.16</slf4j.version>
        <choco-solver.version>4.10.18</choco-solver.version>
        <fastutil.version>8.5.15</fastutil.version>
        <sonar.jacoco.reportPath>${project.basedir}/../target/jacoco.exec</sonar.jacoco.reportPath>
    </properties>

    <dependencyManagement>
        <dependencies>
            <!-- INTRA PROJECT  DEPENDENCIES -->
            <dependency>
                <groupId>de.rub.nds.tls</groupId>
                <artifactId>coffee4j-anvil-engine</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>de.rub.nds.tls</groupId>
                <artifactId>coffee4j-anvil-junit-jupiter</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>de.rub.nds.tls</groupId>
                <artifactId>coffee4j-anvil-model</artifactId>
                <version>${project.version}</version>
            </dependency>

            <!-- OTHER DEPENDENCIES -->
            <dependency>
                <groupId>it.unimi.dsi</groupId>
                <artifactId>fastutil</artifactId>
                <version>${fastutil.version}</version>
            </dependency>
            <dependency>
                <groupId>org.choco-solver</groupId>
                <artifactId>choco-solver</artifactId>
                <version>${choco-solver.version}</version>
            </dependency>

            <!-- LOGGING DEPENDENCIES -->
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-api</artifactId>
                <version>${slf4j.version}</version>
            </dependency>
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-simple</artifactId>
                <version>${slf4j.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <pluginManagement>
            <plugins>
                <!--################# default lifecycle plugins #################-->
                <!-- Plugin to compile source files -->
                <!-- Compile source files -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <configuration>
                        <source>${maven.compiler.source}</source>
                        <target>${maven.compiler.target}</target>
                        <compilerArgs>
                            <compilerArg>-proc:full</compilerArg>
                        </compilerArgs>
                    </configuration>
                </plugin>
                <!-- Plugin to execute unit tests -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <configuration>
                        <properties>
                            <configurationParameters>junit.jupiter.execution.parallel.enabled = false</configurationParameters>
                        </properties>
                        <skipTests>${skip.surefire.tests}</skipTests>
                    </configuration>
                </plugin>
                <!-- Plugin to compile javadoc -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-javadoc-plugin</artifactId>
                    <configuration>
                        <source>${maven.compiler.source}</source>
                        <javadocExecutable>${java.home}/bin/javadoc</javadocExecutable>
                    </configuration>
                    <executions>
                        <execution>
                            <id>attach-javadocs</id>
                            <goals>
                                <goal>jar</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <!-- Pack source files to jar archive -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-source-plugin</artifactId>
                    <executions>
                        <execution>
                            <id>attach-sources</id>
                            <goals>
                                <goal>jar-no-fork</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
            </plugins>
        </pluginManagement>
        <plugins>
            <!--################# default lifecycle plugins #################-->
            <!-- JaCoCo code coverage -->
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <configuration>
                    <destFile>${sonar.jacoco.reportPath}</destFile>
                    <append>true</append>
                </configuration>
                <executions>
                    <execution>
                        <id>agent</id>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- Flatten pom.xml before install / deploy phases -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>flatten-maven-plugin</artifactId>
                <configuration>
                    <flattenMode>ossrh</flattenMode>
                </configuration>
                <executions>
                    <execution>
                        <id>flatten-clean</id>
                        <goals>
                            <goal>clean</goal>
                        </goals>
                        <phase>clean</phase>
                    </execution>
                    <execution>
                        <id>flatten</id>
                        <goals>
                            <goal>flatten</goal>
                        </goals>
                        <phase>process-resources</phase>
                    </execution>
                </executions>
            </plugin>
            <!--############ plugins without lifecycle bindings #############-->
            <!-- Static code analysis -->
            <plugin>
                <groupId>com.github.spotbugs</groupId>
                <artifactId>spotbugs-maven-plugin</artifactId>
                <configuration>
                    <excludeFilterFile>${main.basedir}/resources/spotbugs.xml</excludeFilterFile>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-pmd-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <!-- Deployment to Maven Central is done by activating this profile via -P maven-release -->
        <profile>
            <id>maven-release</id>
            <distributionManagement>
                <repository>
                    <id>ossrh</id>
                    <url>https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/</url>
                </repository>
            </distributionManagement>
            <properties>
                <!-- Artifacts pushed to maven central must be signed -->
                <skip.signature>false</skip.signature>
            </properties>
            <build>
                <plugins>
                    <!-- Artifact deployment to OSSRH -->
                    <plugin>
                        <groupId>org.sonatype.plugins</groupId>
                        <artifactId>nexus-staging-maven-plugin</artifactId>
                        <extensions>true</extensions>
                        <configuration>
                            <serverId>ossrh</serverId>
                            <nexusUrl>https://s01.oss.sonatype.org/</nexusUrl>
                            <!-- deploy with the following command: mvn -P maven-release nexus-staging:release -->
                            <autoReleaseAfterClose>false</autoReleaseAfterClose>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
